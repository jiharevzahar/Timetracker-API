Timetracker(home task Golang course) 2020

Overview:
    Timetracker it a simple web based application which allow to track time. We propose to complete this application as a main task for courses. Students should almost fully implement backend side for this application on their own, as well more experienced students should receive opportunity to show their knowledge and implement advance level tasks. 

Requirements:
Develop backend which should expose structured REST api with structure defined in  API schema
For data persistent use PostgreSQL,MongoDB, PostgreSQL choose by yourself 
Code for the task should follow Golang formatting guidelines, and best practices
As one of the  deliverables we want to see Docker image





API schema:
GET /groups

REQUEST payload
EMPTY

RESPONSE payload
{
	“groups”: [
		{
			“id”: “uuid like id”, 
			“title”: “group’s title”, 
			“tasks”: [ array of tasks in this group ],
		}
]
}

GET /tasks

REQUEST payload
EMPTY

RESPONSE payload
{
	“tasks”: [
		{
			“id”: “uuid like id”, 
			“title”: “task’s title”, 
“group”: “group of the task”,
			“time_frames”: [array of time frames logged into task]
		}
]
}

POST /tasks/

REQUEST payload
{
	“title”: “task’s title”
	“group_id”: “id of the task’s group”
}

RESPONSE
{task object}
status created 

POST /groups/

REQUEST payload
{
	“title”: “group’s title”
}

RESPONSE
{group object}
status created 

POST /timeframes/

REQUEST payload
{
	“task_id”: “id of the timeframe’s task”
	“from”: “datetime””
	“to”: “datetime”
}

RESPONSE
{timeframe object}
status created 


PUT /tasks/{id}

REQUEST payload
{

	//all field of the object with an identified
	//It’s optional to handle updates of subresources timeframes, it up to you decide to delete not presented timeframes assigned to task or not 
}

RESPONSE payload
{	task object	}
status ok 

PUT /groups/{id}
	
REQUEST payload
{
	//all field of the object with an identified
	//It’s optional to handle updates of subresources tasks, it up to you  decide to delete not presented timeframes assigned to task or not 
	
}

RESPONSE payload
	{ group object }

DELETE /tasks/{id}
	
REQUEST payload
Empty

RESPONSE
	status 204 no content

DELETE /groups/{id}
	
REQUEST payload
Empty request

RESPONSE
	status 204 no content

DELETE /timeframes/{id}
	
REQUEST payload
Empty

RESPONSE
	status 204 no content





